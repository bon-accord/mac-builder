#
# Perform bash/zsh shell environment setup
#
---

# Sync home dir files from folder or network location (use -e syncfiles=yes on command line)
- name: "Check if Homedir Source Files Exist at {{ my_sourcefiles_homedir }}"
  stat:
    path: "{{ my_sourcefiles_homedir }}"
  register: srcdir

- name: "Rsync Homedir Files from Sources Dir: {{ my_sourcefiles_homedir }}"
  synchronize:
    src: "{{ my_sourcefiles_homedir }}/"
    dest: "{{ home_dir_path }}"
  when:
    - srcdir.stat.exists
    - syncfiles is defined

# Sync $HOME/bin files from folder or network location (use -e syncfiles=yes on command line)
- name: "Check if $HOME/bin Source Files Exist at {{ my_sourcefiles_homebin }}"
  stat:
    path: "{{ my_sourcefiles_homebin }}"
  register: srcdir

- name: "Rsync $HOME/bin Files from Sources Dir: {{ my_sourcefiles_homebin }}"
  synchronize:
    src: "{{ my_sourcefiles_homebin }}/"
    dest: "{{ home_dir_path }}/bin"
  when:
    - srcdir.stat.exists
    - syncfiles is defined

# Git Config Settings
- name: 'Configure Git Username'
  command: "git config --global user.name \"{{ git_username }}\""

- name: 'Configure Git Email'
  command: "git config --global user.email \"{{ git_useremail }}\""

# Create Folder Structure
- name: 'Create Directory Structure Under $HOME'
  file:
    path: "~/{{ item }}"
    state: directory
    mode: 0775
  loop: "{{ dirs_under_homedir }}"

- name: 'Create Directory Structure Under ~/Documents'
  file:
    path: "~/Documents/{{ item }}"
    state: directory
    mode: 0775
  loop: "{{ dirs_under_documents }}"

# See: https://docs.conda.io/projects/conda/en/latest/{user-guide/install/macos.html,dev-guide/deep-dives/index.html}
- name: 'OpenBB - Download Miniconda'
  get_url:
    url: https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
    dest: ~/miniconda.sh
    checksum: "sha256:4b60eb49cf8fea6272bd2060878ab02cbab187dffd2fd732685c3c92a60b62ed"
  when: install_openbb

# Only install if there is no existing install; upgrade existing install by manually deleting $HOME/miniconda first
- name: 'OpenBB - Install Miniconda'
  shell: |
    if [[ ! -d $HOME/miniconda ]]; then
      bash ~/miniconda.sh -b -p $HOME/miniconda
    fi
  when: install_openbb

- name: 'OpenBB -  Install OpenBB Terminal and SDK'
  shell: |
    source ~/miniconda/bin/activate
    if ! conda env list | grep obb; then
      conda env create -n obb --file https://raw.githubusercontent.com/OpenBB-finance/OpenBBTerminal/main/build/conda/conda-3-10-env.yaml
      conda activate obb
      pip install "openbb" --no-cache-dir
      pip install "openbb[optimization]" --no-cache-dir
    fi
  when: install_openbb

- name: 'OpenBB - Create Miniconda Alias in .zshrc for OpenBB'
  shell: |
    if ! grep condasource ~/.zshrc > /dev/null; then
      echo "alias condasource=\"source ~/miniconda/bin/activate\"" >> ~/.zshrc
      echo "alias openbblaunch=\"source ~/miniconda/bin/activate && conda activate obb && openbb\"" >> ~/.zshrc
    fi
  when: install_openbb

# Download Hashicorp Tools
- name: 'Download Hashicorp Tool Binaries'
  get_url:
    url: "{{ item }}"
    dest: ~/bin
  loop: "{{ hashicorp_binaries }}"

- name: 'Unzip Hashicorp Tool Binaries'
  unarchive:
    src: "~/bin/{{ item }}"
    dest: ~/bin
  loop: "{{ hashicorp_binaries | map('basename') | list }}"

- name: 'Remove Hashicorp Zip Files'
  file:
    path: "~/bin/{{ item }}"
    state: absent
  loop: "{{ hashicorp_binaries | map('basename') | list }}"

# Create Link for Visual Studio Code Binary
- name: 'Create Link to VSCode Binary'
  file:
    src: '/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code'
    dest: "{{ home_dir_path }}/bin/code"
    state: link

# Create Link for Bash v5 & Add to /etc/shells
- name: 'Create Link to Bash Binary to Override /bin/bash (v3)'
  file:
    src: "{{ homebrew_prefix }}/Cellar/bash/5.2.37/bin/bash"
    dest: /usr/local/bin/bash
    state: link
  become: yes

- name: 'Add Bash (v5) to /etc/shells'
  lineinfile:
    path: /etc/shells
    line: '/usr/local/bin/bash'
  become: yes

# Install AWS Tools
- name: 'Install AWS CLI v2'
  shell: "{{ item }}"
  loop:
    - curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "/tmp/AWSCLIV2.pkg"
    - installer -pkg /tmp/AWSCLIV2.pkg -target /
  become: true

- name: 'Install AWS Session Manager SSM Plugin'
  shell: "{{ item }}"
  loop:
    - curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac_arm64/session-manager-plugin.pkg" -o "/tmp/session-manager-plugin.pkg"
    - installer -pkg /tmp/session-manager-plugin.pkg -target /
    - ln -s /usr/local/sessionmanagerplugin/bin/session-manager-plugin /usr/local/bin/session-manager-plugin
  become: true
  ignore_errors: true

# Install pip Packages
- name: 'Install pip Packages'
  pip:
    name: "{{ item }}"
  loop: "{{ pip_package_list }}"

# Install Node Packages
- name: Install Global NPM Packages
  npm:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    global: true
    executable: "{{ item.executable | default(omit) }}"
  loop: "{{ npm_packages }}"
